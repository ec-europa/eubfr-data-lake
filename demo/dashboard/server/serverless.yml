service: demo-dash-server-${self:custom.EUBFR_USERNAME}

plugins:
  - serverless-webpack
  - serverless-offline #serverless-offline needs to be last in the list

custom:
  webpackIncludeModules: true
  eubfrEnvironment: ${opt:eubfr_env, file(../../../config.json):eubfr_env, env:EUBFR_ENV, 'dev'}
  # EUBFR_USERNAME comes from cli parameter, but for spawn() and similar, it's from env var.
  EUBFR_USERNAME: ${opt:username, env:EUBFR_USERNAME, file(../../../config.json):username, ''}
  PRODUCER_KEY_ID: ${opt:PRODUCER_KEY_ID, file(../../../config.json):demo.${self:custom.EUBFR_USERNAME}.AWS_ACCESS_KEY_ID, env:PRODUCER_KEY_ID, ''}
  PRODUCER_SECRET_ACCESS_KEY: ${opt:PRODUCER_SECRET_ACCESS_KEY, file(../../../config.json):demo.${self:custom.EUBFR_USERNAME}.AWS_SECRET_ACCESS_KEY, env:PRODUCER_SECRET_ACCESS_KEY, ''}
  SIGNED_UPLOADS_API:
    Fn::ImportValue: ${self:provider.stage}:storage-signed-uploads:ServiceEndpoint
  DELETER_API:
    Fn::ImportValue: ${self:provider.stage}:storage-deleter:ServiceEndpoint
  serverless-offline:
    port: 4000

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, file(../../../config.json):stage, 'dev'}
  region: ${opt:region, file(../../../config.json):region, 'eu-central-1'}
  deploymentBucket:
    name: eubfr-${self:custom.eubfrEnvironment}-deploy
  stackTags:
    ENV: ${self:custom.eubfrEnvironment}

functions:
  docroot:
    handler: src/api/docroot.handler
    name: ${self:provider.stage}-${self:service}-docroot
    memorySize: 128
    events:
      - http:
          path: demo
          method: get
          cors: true
  download:
    handler: src/api/download.handler
    name: ${self:provider.stage}-${self:service}-download
    memorySize: 128
    timeout: 60
    environment:
      PRODUCER_KEY_ID: ${self:custom.PRODUCER_KEY_ID}
      PRODUCER_SECRET_ACCESS_KEY: ${self:custom.PRODUCER_SECRET_ACCESS_KEY}
      SIGNED_UPLOADS_API: ${self:custom.SIGNED_UPLOADS_API}
    events:
      - http:
          path: demo/download
          method: get
          cors: true
  delete:
    handler: src/api/delete.handler
    name: ${self:provider.stage}-${self:service}-delete
    memorySize: 128
    timeout: 60
    environment:
      PRODUCER_KEY_ID: ${self:custom.PRODUCER_KEY_ID}
      PRODUCER_SECRET_ACCESS_KEY: ${self:custom.PRODUCER_SECRET_ACCESS_KEY}
      DELETER_API: ${self:custom.DELETER_API}
    events:
      - http:
          path: demo/delete
          method: get
          cors: true
  signed-url:
    handler: src/api/signedUrl.handler
    name: ${self:provider.stage}-${self:service}-signed-url
    memorySize: 128
    timeout: 60
    environment:
      PRODUCER_KEY_ID: ${self:custom.PRODUCER_KEY_ID}
      PRODUCER_SECRET_ACCESS_KEY: ${self:custom.PRODUCER_SECRET_ACCESS_KEY}
      SIGNED_UPLOADS_API: ${self:custom.SIGNED_UPLOADS_API}
    events:
      - http:
          path: demo/signed_url
          method: get
          cors: true
  update:
    handler: src/api/update.handler
    name: ${self:provider.stage}-${self:service}-update
    memorySize: 128
    timeout: 60
    environment:
      PRODUCER_KEY_ID: ${self:custom.PRODUCER_KEY_ID}
      PRODUCER_SECRET_ACCESS_KEY: ${self:custom.PRODUCER_SECRET_ACCESS_KEY}
      SIGNED_UPLOADS_API: ${self:custom.SIGNED_UPLOADS_API}
    events:
      - http:
          path: demo/update
          method: get
          cors: true

resources:
  Outputs:
    ProjectsEndpoint:
      Description: The demo server endpoint
      Value:
        Fn::Join:
          - ''
          - - Ref: ApiGatewayRestApi
            - '.execute-api.'
            - ${self:provider.region}
            - '.amazonaws.com/'
            - ${self:provider.stage}
      Export:
        Name: "${self:provider.stage}:${self:service}:ServiceEndpoint"

service: resources-graphql

plugins:
  - serverless-export-env
  - serverless-webpack
  - serverless-offline

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      forceExclude:
        - aws-sdk
    packager: yarn
  eubfrEnvironment: ${opt:eubfr_env, file(../../config.json):eubfr_env, env:EUBFR_ENV, 'dev'}
  serverless-offline:
    port: 4000

package:
  individually: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, file(../../config.json):stage, env:EUBFR_STAGE, 'dev'}
  region: ${opt:region, file(../../config.json):region, env:EUBFR_AWS_REGION, 'eu-central-1'}
  deploymentBucket:
    name: eubfr-${self:custom.eubfrEnvironment}-deploy
  stackTags:
    ENV: ${self:custom.eubfrEnvironment}
  iamRoleStatements:
    # http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-aws-integrations.html?shortFooter=true#es-aws-integrations-s3-lambda-es-authorizations
    - Effect: 'Allow'
      Action: 'es:*'
      Resource: 'arn:aws:es:${self:provider.region}:*:domain/*'
    - Effect: 'Allow'
      Action:
        - 'secretsmanager:GetSecretValue'
      Resource: '*'

functions:
  graphql:
    memorySize: 3008
    timeout: 300
    environment:
      INDEX: ${self:provider.stage}-projects
      TYPE: project
      STAGE: ${self:provider.stage}
      REGION: ${self:provider.region}
      API_ID: { 'Ref': 'ApiGatewayRestApi' }
      API:
        Fn::ImportValue: ${self:custom.eubfrEnvironment}:resources-elasticsearch:PublicEndpoint
      SERVICE_SECRET_NAME: services/elastic-graphql
    handler: src/api/graphql.handler
    events:
      - http:
          path: graphql
          method: post
          cors: true
      - http:
          path: graphql
          method: get
